---
title: "Data wrangling in TidyVerse"
author: "Michael Zargari"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(here)
library(janitor)
```

## Read in WB data files

```{r}
wb_indicators <- read_csv(here("data", "wb_indicators.csv"), na = c("..", ""))
wb_indicators_metadata <- read_csv(here("data", "wb_indicators_metadata.csv"))
```

# Tidy up my data

## pivot_longer to get years into a single column

```{r}
wb_indicators_long <- wb_indicators %>% 
  pivot_longer(cols = "2001 [YR2001]":"2020 [YR2020]"
               , names_to = "year"
               , values_to = "indicator_value")

 View(wb_indicators_long)
```

## separate to clean up the year column

## IF THE COLUMN EXISTS AND DOES NOT HAVE A SPACE IN IT, THEN YOU DO NOT NEED TO PUT IT IN QUOTES

```{r}
wb_clean <- wb_indicators_long %>% 
  separate(col = year
           , into = c("year", "year_chr")
           , sep = " ") %>%
  select(-year_chr, -"Country Code", -"Series Code") %>%
  mutate(year = as.numeric(year)) %>% 
  drop_na("Series Name") %>% 
  pivot_wider(names_from = "Series Name"
              , values_from = indicator_value)

names(wb_clean) <- c("country", "year", "access_clean_fuels_pp", "access_electricity_pp", "co2_emissions_kt", "fossil_fuels_cons_pct", "water_stress")

# View(wb_clean)
```

```{r}
wb_subset <- wb_clean %>% 
  filter(country %in% c("Algeria", "Barbados", "Bulgaria", "Chile"))

# View(wb_subset)
```

```{r}
ggplot(data = wb_subset, aes(  x = year
                             , y = co2_emissions_kt
                             )) +
  geom_line(aes(color = country)) +
  facet_wrap(~country)
```

# After Lunch:

## Filtering data

```{r}
# View(starwars)
```

### Example 1: Filter to only keep exact matches

```{r}
ex_1 <- starwars %>% 
  filter(height > 180)

## Checking that our filter works
# min(ex_1$height)
```

```{r}
ex_2 <- starwars %>% 
  filter(eye_color == "blue")

## Checking that our filter works
# unique(ex_2$eye_color)
```

```{r}
ex_3 <- starwars %>% 
  filter(homeworld == "Naboo")

## Checking that our filter works
 # unique(ex_3$homeworld)
```

### Examples: filtering on multiple conditions

```{r}
ex_4 <- starwars %>% 
  filter(height > 180 & homeworld == "Tatooine")

## Checking that our filter works
 # min(ex_4$height)
 # unique(ex_4$homeworld)
```

Create subset where the hair color is brown and the species is human

```{r}
ex_5 <- starwars %>% 
  filter(hair_color == "brown" & species == "Human")
```

### Filtering OR statements

```{r}
ex_6 <- starwars %>% 
  filter(height > 180 | eye_color == "yellow")
```

Create a subset that keeps rows if homeworld is Endor OR species is droid

```{r}
ex_7 <- starwars %>% 
  filter(homeworld == "Endor" | species == "Droid")
```

```{r}
ex_8 <- starwars %>% 
  filter(eye_color == "yellow"
         | eye_color == "blue"
         | eye_color == "red")

## This does the exact same thing as above
ex_9 <- starwars %>% 
  filter(eye_color %in% c("yellow", "blue", "red"))

## This will go through and iterate in order of the eye_color column to see what column matches "yellow" and keeps that, then continues down the list and finds a "blue" then continues until it finds a "red" then starts to look for a "yellow" again etc.
ex_10 <- starwars %>% 
  filter(eye_color == c("yellow", "blue", "red"))
```

Create a subset where homeworld is Endor OR Tatooine OR Naboo AND height \< 150

```{r}
ex_11 <- starwars %>% 
  filter(homeworld %in% c("Endor", "Tatooine", "Naboo") & height < 150)
```

### Examples with negate functions

```{r}
ex_12 <- starwars %>% 
  filter(species != "Human")
```

```{r}
ex_13 <- starwars %>% 
  filter(!homeworld %in% c("Endor", "Tatooine", "Naboo"))
```

# Select or exclude columns: `select()`

```{r}
## This only takes out/outputs the columns we listed

ex_14 <- wb_clean %>% 
  select(country, year, co2_emissions_kt)
```

```{r}
## This outputs the columns from year all the way until fossil_fuels_cons_pct

ex_15 <- wb_clean %>% 
  select(year:fossil_fuels_cons_pct)
```

```{r}
## This outputs the columns from year all the way until fossil_fuels_cons_pct except for access_electricity_pp
## You could also replace the comma (,) with a &

ex_16 <- wb_clean %>% 
  select(year:fossil_fuels_cons_pct, -access_electricity_pp)
```

```{r}
ex_17 <- wb_clean %>% 
  filter(country %in% c("Bolivia", "Chile", "Mexico")) %>% 
  select(country:fossil_fuels_cons_pct)
```

```{r}
## The new columns name goes on the left hand side and the data where that comes from goes on the right hand side and they get outputted in this order
## New name = Old name

ex_18 <- wb_clean %>% 
  select(year_new = year
         , emissions = co2_emissions_kt
         , country_name = country)
```

Select only columns for country, year, and water stress, and reorder them as year, country ,water stress, then filter to only include observations for any three countries of your choosing

```{r}
ex_19 <- wb_clean %>% 
  select(year
         , country
         , water_stress) %>% 
  filter(country %in% c("Israel", "Iran, Islamic Rep.", "United States"))
```

# `rename()`

```{r}
## New name = old name

ex_20 <- wb_clean %>% 
  rename(ffcp = fossil_fuels_cons_pct
         , ws = water_stress)
```

```{r}
ex_21 <- wb_clean %>% 
  rename(COUNTRY_capitalized = country
         , YEAR_capitalized = year)
```

# `mutate()`: update an existing column, or add a new one

## If you assign a NEW column name, it will add a new column to the end of your data frame. If you assign an existing column name, it will overwrite that column

```{r}
## This creates a new column that is measured in tons to get the kilotons column and multiple the values by 1000
ex_22 <- wb_clean %>% 
  mutate(co2_emissions_t = co2_emissions_kt * 1000)
```

```{r}
## This creates a new column called "yay" that has "YAY" typed all the way down
ex_23 <- wb_clean %>% 
  mutate(yay = "YAY")
```

```{r}
## This gets all the countries and adds "YAY" at the end of their names
ex_24 <- wb_clean %>% 
  mutate(country = paste(country, "YAY"))
```

```{r}
## This gets all the countries and adds the number that they are at the end of their names
ex_25 <- wb_clean %>% 
  mutate(country = paste(country, seq_along(country)))
```

```{r}
## Characters are left justified
ex_26 <- wb_clean %>% 
  mutate(year = as.character(year))
```

```{r}
## Numbers are right justifies
ex_27 <- wb_clean %>% 
  mutate(year = as.numeric(year))
```

### This relocates the column to be after "year": `relocate()`

```{r}
ex_28 <- wb_clean %>% 
  relocate(water_stress, .after = year)

ex_29 <- wb_clean %>% 
  mutate(co2_emissions_t = co2_emissions_kt * 1000) %>% 
  relocate(co2_emissions_t, .after = co2_emissions_kt)
```

# `group_by()`: creates groups under the hood based on variables you specify

## Just piping in group_by() does not do anything and you need summarize() afterwards for it to work

# `summarize()` : applies your functions to each group above, and returns them in a nice summary able

```{r}
ex_30 <- starwars %>% 
  group_by(species, homeworld) %>% 
  summarize(mean_height = mean(height, na.rm = TRUE)
            , mean_mass = mean(mass, na.rm = TRUE))
```

```{r}
ex_31 <- starwars %>% 
  filter(homeworld %in% c("Naboo", "Tatooine")) %>% 
  group_by(species, homeworld) %>% 
  summarize(mean_height = mean(height, na.rm = TRUE)
            , mean_mass = mean(mass, na.rm = TRUE))
```

# Frequency Table: `uncount()`

```{r}
df <- tribble(
  ~species, ~length, ~number_of_observations,
  "lobster", 12, 4,
  "lobster", 14, 6,
  "lobster", 15, 2,
)

df_case <- df %>% 
  uncount(number_of_observations)
```

# `count()`: counts observations and is a combination of group_by(), summarize(), n()

```{r}
ex_32 <- starwars %>% 
  count(homeworld, species)

## "Size" is what the name of the column will be
ex_33 <- starwars %>% 
  group_by(homeworld, species) %>% 
  summarize(size = n(), mean_height = mean(height, na.rm = TRUE))
```

## Example: 

### Starting from wb_clean, only keep observations for Nicaragua, Ecuador, Peru, and Chile, AND for years greater than 2005 (which means data starts at 2006). 

### Only keep columns for country, year, and co2 emissions. 

### Add a new column that is co2 emissions converted to megatons. 

### Find the total co2 emissions in megatons for years still in the dataset by country

```{r}
example <- wb_clean %>% 
  filter(country %in% c("Nicaragua", "Ecuador", "Peru", "Chile") & year > 2005) %>% 
  select(country, year, co2_emissions_kt) %>% 
  mutate(co2_emissions_mt = co2_emissions_kt / 1000) %>% 
  group_by(country) %>% 
  summarize(total_CO2_megatons_since_2005 = sum(co2_emissions_mt, na.rm = TRUE))
```
